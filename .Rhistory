getwd()
all_data = read.csv("activity.csv")
all_data = read.csv("activity.zip/activity.csv")
all_data = read.csv("activity.zip")
View(all_data)
all_data = read.csv(unz("activity.zip", "activity.csv"))
View(all_data)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
# 01 Load the data
all_data = read.csv(unz("activity.zip", "activity.csv"))
# 02 Transform data to usable format/layout
data_nomiss = subset(all_data, steps != 'NA')
# 01 Calculate the total number of steps taken per day
steps_per_day = sqldf::sqldf("
select
date
,sum(steps) as total_steps
from data_nomiss
group by
date
")
# 02 Make a histogram of the total number of steps taken each day
hist(steps_per_day$total_steps
,main = "Histogram of steps taken per day"
,xlab = "Steps per day")
# 03 Calculate and report the mean and median of the total number of steps taken per day
nomiss_daily_mean = mean(steps_per_day$total_steps)
nomiss_daily_median = median(steps_per_day$total_steps)
# 01 Make a time series plot...
avg_steps_per_interval = sqldf::sqldf("
select
interval
,avg(steps) as avg_steps
from data_nomiss
group by
interval
")
plot(avg_steps_per_interval$interval
,avg_steps_per_interval$avg_steps
,type = "l"
,main = "Average number of steps taken per inverval"
,xlab = "Daily interval"
,ylab = "Average steps")
# 02 Which 5-minute interval, ... , contains the maximum number of steps?
max_steps = subset(avg_steps_per_interval, avg_steps == max(avg_steps))
# 01 Calculate and report the total number of missing values
data_miss = nrow(all_data[is.na(all_data$steps),])
# 03 Create a new dataset that is equal to the original dataset but with the missing data filled in
new_data = sqldf::sqldf("
select a.*
,b.avg_steps
,b.interval as interval2
,case
when a.steps is null then b.avg_steps
else a.steps
end as new_steps
from all_data a
left join avg_steps_per_interval b
on b.interval = a.interval
")
# 04 Make a histogram of the total number of steps taken each day and ...
steps_per_day_new = sqldf::sqldf("
select
date
,sum(new_steps) as total_steps
from new_data
group by
date
")
hist(steps_per_day_new$total_steps
,main = "Histogram of steps taken per day (missing values imputed)"
,xlab = "Steps per day")
all_daily_mean = mean(steps_per_day_new$total_steps)
all_daily_median = median(steps_per_day_new$total_steps)
# 01 Create a new factor variable in the dataset with two levels - "weekday" and "weekend"
new_data2 = dplyr::mutate(new_data, dow = weekdays(lubridate::ymd(date)))
new_data3 = sqldf::sqldf("
select *
,case
when dow in ('Saturday','Sunday') then 'weekend'
else 'weekday'
end as day_type
from new_data2
")
new_data3$day_type = as.factor(new_data3$day_type)
avg_steps_day_split = sqldf::sqldf("
select
day_type
,interval
,avg(new_steps) as avg_new_steps
from new_data3
group by
day_type
,interval
")
# 02 Make a panel plot containing a time series plot ...
library(ggplot2)
ggplot2::ggplot(avg_steps_day_split, aes(interval, avg_new_steps)) +
geom_line() +
facet_grid(day_type~.) +
xlab("Interval") +
ylab("Avg. number of steps") +
ggtitle("Comparison of avg steps taken per interval over weekends and weekdays")
getwd()
